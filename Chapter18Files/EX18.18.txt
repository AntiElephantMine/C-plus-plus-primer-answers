18.18)

(If string)

using std::swap brings everything with the name "swap" in namespace std to the scope of the function.

swap(v1.mem1, v2.mem1):

First this finds the name swap from the enclosing scope and outer scopes. This part finds the swap 
names introduced from using std::swap. This includes both the template version and string-specialised 
version. Overload resolution chooses the specialised version. 

We could mention argument dependent lookup here. The compiler looks in the namespace that string
was defined to find more candidate functions (with the name swap). But since this namespace is also 
std, and we already did using std::swap, it is pointless to mention.


(If int)

This finds the name swap from the enclosing scope and outer scopes. This part finds only the template
version of swap introduced from using std::swap. There is no other swap to find. 



18.19)

If the call was std::swap then argument dependent name lookup does not occur. It searches straight 
in the std namespace for the function swap. For strings this, again, finds the template and specialised version
and overload resolution chooses the specialised (for ints the template is only found). 