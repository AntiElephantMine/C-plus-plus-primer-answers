class SmallInt {
   friend SmallInt operator+(const SmallInt&, const SmallInt&);
public:
   SmallInt(int = 0); // conversion from int
   operator int() const { return val; } // conversion to int
private:
   std::size_t val;
};

struct LongDouble {
    LongDouble operator+(const SmallInt&);
    LongDouble(double = 0.0);
    operator double();
    operator float();
};

LongDouble operator+(LongDouble&, double);


1) CANDIDATE FUNCTIONS:

SmallInt operator+(const SmallInt&, const SmallInt&);
LongDouble operator+(LongDouble&, double);
Built-in operators

VIABLE FUNCTIONS:

Built-in operators

int + double
int + float //ambiguous calll



2) CANDIDATE FUNCTIONS:


SmallInt operator+(const SmallInt&, const SmallInt&);
LongDouble operator+(LongDouble&, double);
LongDouble LongDouble::operator+(const SmallInt&);
Built-in operators


VIABLE FUNCTIONS:

LongDouble operator+(LongDouble&, double);
LongDouble LongDouble::operator+(const SmallInt&); //this is selected since no conversion (except const conversion) is necessary
Built-in operators


